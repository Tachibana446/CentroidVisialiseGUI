// Shift JIS
/*************************************************
人間のジョイントの各パーツ・構造を推定するスクリプト
**************************************************/

global proc createWindow() {
    if((`window -ex centroidGuiWindow`) == true) deleteUI centroidGuiWindow;
    string $win = `window centroidGuiWindow`;

    scrollLayout;
    button -l "hoge";
    
    rowLayout -nc 3;
    text -l "ルートジョイント";
    textField rootJointTextField;
    button -l "SET" -c "setCurrentObject(\"rootJointTextField\")";
    setParent ..;

    rowLayout -nc 4;
    text -l "胴";
    textField chestJointTextField;
    button -l "SET" -c "setCurrentObject(\"chestJointTextField\")";
    setParent ..;

    rowLayout -nc 4;
    text -l "左上腕";
    textField upperArmL_Textfield;
    button -l "SET" -c "setCurrentObject(\"upperArmL_Textfield\")";
    setParent ..;

    rowLayout -nc 4;
    text -l "右上腕";
    textField upperArmR_Textfield;
    button -l "SET" -c "setCurrentObject(\"upperArmR_Textfield\")";
    setParent ..;

    rowLayout -nc 3 _threeColumnsRows;
    columnLayout _headerColumn;
    text -l "";
    text -l "前腕";
    text -l "手";
    text -l "上肢";
    setParent ..;
    
    columnLayout _leftColumn;
    text -l "左";
    rowLayout -nc 2;
    textField foreArmL_textField;
    button -l "SET" -c "setCurrentObject(\"foreArmL_textField\")";
    setParent ..;
    rowLayout -nc 2;
    textField handL_textField;
    button -l "SET" -c "setCurrentObject(\"handL_textField\")";
    setParent ..;
    rowLayout -nc 2;
    textField upperLegL_textField;
    button -l "SET" -c "setCurrentObject(\"upperLegL_textField\")";
    setParent ..;
    setParent ..;

    columnLayout _rightColumn; 
    text -l "右";
    rowLayout -nc 2;
    textField foreArmR_textField;
    button -l "SET" -c "setCurrentObject(\"foreArmR_textField\")";
    setParent ..;
    rowLayout -nc 2;
    textField handR_textField;
    button -l "SET" -c "setCurrentObject(\"handR_textField\")";
    setParent ..;
    rowLayout -nc 2;
    textField upperLegR_textField;
    button -l "SET" -c "setCurrentObject(\"upperLegR_textField\")";
    setParent ..;
    setParent ..;

    setParent ..;
    button -l "Do it" -c "SearchBones_ButtonClick()";

    showWindow $win;
}

proc setCurrentObject(string $fieldName){
    $current = `ls -sl -head 1`;
    textField -e -tx $current $fieldName;
}

proc SearchBones_ButtonClick(){
    $root = `textField -q -tx rootJointTextField`;
    SearchBones($root);
}

proc SearchBones(string $root){
    $children = `listRelatives -path -type "joint" $root`;
   
    $chest = "";
    $chestY = -9999;
    for ($child in $children)
    {
        string $_chest = GetChestRecursive($child);
        if($_chest == "")
            continue;
        $_pos = `xform -q -ws -t $_chest`;
        if($chestY == -9999 || $_pos[1] > $chestY){
            $chest = $_chest;
            $chestY = $_pos[1];
        }
    }
    if($chest != "")
    {
        textField -e -tx $chest chestJointTextField;
        // 上腕の取得
        SearchUpperArms($chest);
        $waist = GetWaistRecursive($chest, $root);
        SearchUpperLegJoint($root, $waist);
    }
}
        
// 上腕の取得
proc SearchUpperArms(string $chest){
    $upperChildren = `listRelatives -path -type "joint" $chest`;
    int $lengthList[];
    $i = 0;
    for ($uc in $upperChildren)
    {
        $lengthList[$i] = GetDecendantsCount($uc, 0);
        $i += 1;
    }
    $sorted = sort($lengthList);
    string $upperArm1 = "";
    string $upperArm2;
    $i = 0;
    // 最も子孫が長い2つを腕と認定
    for ($uc in $upperChildren)
    {   
        if($upperArm1 == "" && $lengthList[$i] == $sorted[size($sorted) - 1])
            $upperArm1 = $uc;
        else if($upperArm1 != "" && $lengthList[$i] == $sorted[size($sorted) - 2])
        {
            $upperArm2 = $uc;
            break;
        }
        $i += 1;
    }
    $pos1 = `xform -q -ws -t $upperArm1`;
    $pos2 = `xform -q -ws -t $upperArm2`;
    // （前から見て）左にある方が右腕
    string $upperArmL;
    string $upperArmR;
    if($pos1[0] < $pos2[0]){
        $upperArmR = $upperArm1;
        $upperArmL = $upperArm2;
    }else{
        $upperArmL = $upperArm1;
        $upperArmR = $upperArm2;
    }
    textField -e -tx $upperArmR upperArmR_Textfield;
    textField -e -tx $upperArmL upperArmL_Textfield;
    SearchHandJoint($upperArmL, $upperArmR);
}

// 前腕と手を取得
proc SearchHandJoint(string $upperArmL, string $upperArmR){
    $handL = GetChestRecursive($upperArmL);
    if($handL != ""){
        $foreArmL = `listRelatives -path -p $handL`;
        textField -e -tx $foreArmL[0] foreArmL_textField;
    }
    textField -e -tx $handL handL_textField;
    $handR = GetChestRecursive($upperArmR);
    if($handR != ""){
        $foreArmR = `listRelatives -path -p $handR`;
        textField -e -tx $foreArmR[0] foreArmR_textField;
    }
    textField -e -tx $handR handR_textField;
}

// 上肢取得
// input $waist: ルート直下の上半身に続くノード
proc SearchUpperLegJoint(string $root, string $waist){
    $children = `listRelatives -path -type "joint" $root`;
    // 上半身は除く
    $children = stringArrayRemove({ $waist }, $children );
    // 子孫の長さをカウント
    int $lengthList[];
    for ($i=0; $i < size($children); $i++)
    {
        $lengthList[$i] = GetDecendantsCount($children[$i], 0);
    }
    $sorted = sort($lengthList);
    string $upperLeg1 = "";
    string $upperLeg2;
    print "\nsorted:";
    print $children;
    print "\n";
    // 最も子孫が長い2つを足とする
    for ($i=0; $i < size($children); $i++)
    {
        if($upperLeg1 == "" && $lengthList[$i] == $sorted[size($sorted) - 1])
            $upperLeg1 = $children[$i];
        else if($upperLeg1 != "" &&  $lengthList[$i] == $sorted[size($sorted) - 2]) 
        {
            $upperLeg2 = $children[$i];
            break;
        }    
    }
    // 前から見て右にある方が左足
    string $upperLegL, $upperLegR;
    $pos1 = `xform -q -ws -t $upperLeg1`;
    $pos2 = `xform -q -ws -t $upperLeg2`;
    if($pos1[0] > $pos2[0]){
        $upperLegL = $upperLeg1;
        $upperLegR = $upperLeg2;
    }else{
        $upperLegL = $upperLeg2;
        $upperLegR = $upperLeg1;
    }
    textField -e -tx $upperLegL upperLegL_textField;
    textField -e -tx $upperLegR upperLegR_textField;
}

// 胸から下、ルートの付け根の腰を取得する
proc string GetWaistRecursive(string $chest, string $root){
    $parent = `listRelatives -path -p $chest`;
    if(size($parent) == 0)
        return "";
    if($parent[0] == $root)
        return $chest;
    else
        return GetWaistRecursive($parent[0], $root);
}

// 再帰して複数の子を持つジョイントを探す
proc string GetChestRecursive(string $joint){
    $children = `listRelatives -path -type "joint" $joint`;
    $count = `size $children`;
    if($count == 0 )
        return "";
    else if($count >= 2)
        return $joint;
    else
    {
        return GetChestRecursive($children[0]);
    }
}

// 再帰して子孫の長さ(何代まで続いたか)を取得
proc int GetDecendantsCount(string $joint, int $count){
    $children = `listRelatives -path -type "joint" $joint`;
    $count = `size $children`;
    if($count == 0)
        return $count;
    // 各兄弟の中で最も子孫が長いもののカウントを返す
    $max = $count;
    for ($c in $children)
    {
        $num = GetDecendantsCount($c, $count + 1);
        if($num > $max)
            $max = $num;  
    }
    return $max;
}


createWindow();